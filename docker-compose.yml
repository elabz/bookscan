version: '3.8'

services:
  frontend:
    container_name: bookscan-frontend
    build: ./client
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:4000
    depends_on:
      - backend

  backend:
    container_name: bookscan-backend
    build: 
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - DATABASE_URL=postgres://bookuser:securepass@postgres:5432/bookscan
      - REDIS_URL=redis://redis:6379
      - OLLAMA_URL=http://ollama:11434
      - SUPERTOKENS_CONNECTION_URI=http://supertokens:3567
      - NODE_ENV=production
    depends_on:
      - postgres
      - redis
      - ollama
      - supertokens

  postgres:
    container_name: bookscan-postgres
    image: postgres:15
    environment:
      - POSTGRES_USER=bookuser
      - POSTGRES_PASSWORD=securepass
      - POSTGRES_DB=bookscan
    volumes:
      - postgres-data:/var/lib/postgresql/data
    command: postgres -c 'shared_preload_libraries=pgvector'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bookuser -d bookscan"]
      interval: 5s
      timeout: 5s
      retries: 5
      
  redis:
    container_name: bookscan-redis
    image: redis:7
    volumes:
      - redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  ollama:
    container_name: bookscan-ollama
    image: ollama/ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    deploy:
      resources:
        reservations:
          memory: 8GB

  supertokens:
    container_name: bookscan-supertokens
    image: supertokens/supertokens-postgresql
    environment:
      - POSTGRESQL_USER=bookuser
      - POSTGRESQL_PASSWORD=securepass
      - POSTGRESQL_HOST=postgres
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE_NAME=auth
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3567:3567"

  ocr-worker:
    container_name: bookscan-ocr-worker
    build:
      context: ./ocr-service
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./temp-images:/app/temp-images

volumes:
  postgres-data:
  redis-data:
  ollama-data:
